name: Build wheels

on:
  push:
    branches: [ rel-0.13.0 ]
  pull_request:
    branches: [ rel-0.13.0 ]

jobs:
  build_wheels:
    name: ${{ matrix.os }}, Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python: [cp37, cp38, cp39, cp310, cp311]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    env:
      BUILD_COMMIT: "v0.13.4"  # or a specific version, e.g., v0.13.1
      CIBW_BUILD: ${{ matrix.python }}-*
      CIBW_ARCHS_LINUX: "x86_64 aarch64"
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      # No support for pypy, musl, 32-bit windows
      CIBW_SKIP: "pp* *-musllinux_* *-win32"
      CIBW_TEST_REQUIRES: pytest pytest-xdist
      CIBW_TEST_COMMAND: python -c "import statsmodels; statsmodels.test(['--skip-examples','--skip-slow','-n','2'])"
      # Increase pip debugging output
      CIBW_BUILD_VERBOSITY: 2
      # Avoid testing on emulated architectures
      CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x}"
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'auditwheel repair --strip -w {dest_dir} {wheel}'
      SCIPY_WHEELS_NIGHTLY_ACCESS: ${{ secrets.SCIPY_WHEELS_NIGHTLY_ACCESS }}
      MULTIBUILD_WHEELS_STAGING_ACCESS: ${{ secrets.MULTIBUILD_WHEELS_STAGING_ACCESS }}
      MKL_NUM_THREADS: 1
      OMP_NUM_THREADS: 1
      OPENLAS_NUM_THREADS: 1

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Used to host cibuildwheel
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.11.2

      - name: Build wheels
        run: |
          pushd statsmodels
          git remote -v
          git checkout main
          git pull origin main
          popd
          git submodule foreach git checkout ${{ env.BUILD_COMMIT }}
          python -m cibuildwheel --output-dir wheelhouse statsmodels

      - name: Setup Upload Variables
        if: ${{ always() }}
        shell: bash
        run: |
          if [ "schedule" == "${{ github.event_name }}" ] || [ "push" == "${{ github.event_name }}" ]; then
            echo "ANACONDA_UPLOAD=true" >> $GITHUB_ENV
          else
            echo "ANACONDA_UPLOAD=false" >> $GITHUB_ENV
          fi
          if [ "schedule" == "${{ github.event_name }}" ] || [ "main" == "$BUILD_COMMIT" ]; then
            echo "ANACONDA_ORG=scipy-wheels-nightly" >> $GITHUB_ENV
            echo "TOKEN=$SCIPY_WHEELS_NIGHTLY_ACCESS" >> $GITHUB_ENV
          else
            echo "ANACONDA_ORG=multibuild-wheels-staging" >> $GITHUB_ENV
            echo "TOKEN=$MULTIBUILD_WHEELS_STAGING_ACCESS" >> $GITHUB_ENV
          fi
      - name: Upload wheels
        if: ${{ always() }}
        shell: bash
        run: |
          # trigger an upload to the shared ecosystem
          # infrastructure at: https://anaconda.org/scipy-wheels-nightly
          # for cron jobs only (restricted to main branch once
          # per week)
          # SCIPY_WHEELS_NIGHTLY_ACCESS is a secret token
          # used in Travis CI config, originally
          #
          # for merges (push events) we use the staging area instead;
          # MULTIBUILD_WHEELS_STAGING_ACCESS is a secret token used in Travis
          # CI config, originally generated at anaconda.org for
          # multibuild-wheels-staging
          # generated at anaconda.org for scipy-wheels-nightly
          echo ${PWD}
          if [ ${ANACONDA_UPLOAD} == true ]; then
            # main branches of these two packages
            python -m pip install cython
            python -m pip install git+https://github.com/Anaconda-Server/anaconda-client.git@be1e14936a8e947da94d026c990715f0596d7043
            ls ./wheelhouse/*.whl
            anaconda -t ${TOKEN} upload --force -u ${ANACONDA_ORG} ./wheelhouse/*.whl
            echo "PyPI-style index: https://pypi.anaconda.org/$ANACONDA_ORG/simple"
          fi
