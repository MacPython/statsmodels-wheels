image: Visual Studio 2019

environment:
  STATSMODELS_STAGING_TOKEN:
    secure: CUHepxpinrKmN6RU/I41q8xFaFYmCCFf/hdl3wlpcW8Dk6yS2EFb2WJqCSDbKvt8

environment:
  global:
    BUILD_COMMIT: "v0.13.0"
    REPO_DIR: statsmodels
    PKG_NAME: statsmodels
    NP_BUILD_DEP: "numpy==1.17.5"
    NP_TEST_DEP: "numpy==1.17.5"
    SP_BUILD_DEP: "scipy==1.3.3"
    SP_TEST_DEP: "scipy==1.3.3"
    PANDAS_DEP: "pandas"
    EXTRA_FLAGS: ""
    CYTHON_DEP: "Cython==0.29.21"
    DAILY_COMMIT: "main"
    PYTHONHASHSEED: 0  # For xdist
    ANACONDA_USERNAME: "statsmodels"

  matrix:
    - PYTHON: C:\Python39-x64
      NP_BUILD_DEP: "numpy==1.19.4"
      NP_TEST_DEP: "numpy==1.19.4"
      SP_BUILD_DEP: "scipy==1.5.4"
      SP_TEST_DEP: "scipy==1.5.4"
    - PYTHON: C:\Python38-x64
    - PYTHON: C:\Python37-x64
    - PYTHON: C:\Python39
      NP_BUILD_DEP: "numpy==1.19.4"
      NP_TEST_DEP: "numpy==1.19.4"
      SP_BUILD_DEP: "scipy==1.5.4"
      SP_TEST_DEP: "scipy==1.5.4"
    - PYTHON: C:\Python38
    - PYTHON: C:\Python37

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  - ps: >-
      if ($env:BUILD_COMMIT -eq "main") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
      } else {
        $env:CONTAINER = "wheels"
      }

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - python -m pip install -U pip

  # Fix MSVC builds for 64-bit Python. See:
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Install the build dependencies of the project.
  - pip install %NP_BUILD_DEP% %SP_BUILD_DEP% %CYTHON_DEP%
  # Pin wheel to 0.26 to avoid Windows ABI tag for built wheel
  - pip install wheel==0.26
  - git submodule update --init
  # Build wheel
  - cd %REPO_DIR%
  - git checkout %BUILD_COMMIT%
  - python setup.py bdist_wheel
  - cd ..

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  # Install the test dependencies
  - pip install %NP_TEST_DEP% %SP_TEST_DEP% patsy %PANDAS_DEP% nose pytest pytest-xdist!=1.30.0
  - pip install --pre --no-index --find-links .\%REPO_DIR%\dist %PKG_NAME%
  # Change into an innocuous directory and find tests from installation
  - mkdir for_testing
  - cd for_testing
  - python --version
  - 'echo backend : agg > matplotlibrc'
  - python --version
  - python -c "import statsmodels.api as sm; sm.show_versions();"
  - python -c "import statsmodels; statsmodels.test(extra_args=['--skip-slow', '--skip-examples', '--tb=short', '-n 2'], exit=True)"
  - cd ..

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: $(REPO_DIR)\dist\*

on_success:
  # Upload the generated wheel package to Anaconda.org
  # Requires ANACONDA_TOKEN to be set
  - ps: . .\anaconda.org\upload-anaconda.ps1

cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%LOCALAPPDATA%\pip\cache'
