# vim ft=yaml
# CI on Windows via appveyor

environment:
  global:
    BUILD_COMMIT: f1d5eddd4
    REPO_DIR: statsmodels
    PKG_NAME: statsmodels
    NP_BUILD_DEP: "numpy==1.10.4"
    NP_TEST_DEP: "numpy==1.10.4"
    SP_BUILD_DEP: "scipy"
    SP_TEST_DEP: "scipy"
    EXTRA_FLAGS: ""
    CYTHON_DEP: "Cython==0.27.3"
    WHEELHOUSE_UPLOADER_USERNAME: travis-worker
    WHEELHOUSE_UPLOADER_SECRET:
      secure: 9s0gdDGnNnTt7hvyNpn0/ZzOMGPdwPp2SewFTfGzYk7uI+rdAN9rFq2D1gAP4NQh
    DAILY_COMMIT: master

  matrix:
    - PYTHON: C:\Python27
    - PYTHON: C:\Python27-x64
    - PYTHON: C:\Python35
    - PYTHON: C:\Python35-x64
    - PYTHON: C:\Python36
      # Need 1.13 for h5py (h5py linked against 1.13)
      NP_BUILD_DEP: "numpy==1.13"
      NP_TEST_DEP: "numpy==1.13"
    - PYTHON: C:\Python36-x64
      NP_BUILD_DEP: "numpy==1.13"
      NP_TEST_DEP: "numpy==1.13"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
      } else {
        $env:CONTAINER = "wheels"
        $env:UPLOAD_ARGS = "--no-update-index"
      }

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - python -m pip install -U pip

  # Fix MSVC builds for 64-bit Python. See:
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Install the build dependencies of the project.
  - pip install %NP_BUILD_DEP% %SP_BUILD_DEP% %CYTHON_DEP%
  # Pin wheel to 0.26 to avoid Windows ABI tag for built wheel
  - pip install wheel==0.26
  - git submodule update --init
  # Build wheel
  - cd %REPO_DIR%
  # Add my repository, for fixes
  - git remote add mb https://github.com/matthew-brett/statsmodels.git --fetch
  - git checkout %BUILD_COMMIT%
  - python setup.py bdist_wheel
  - cd ..

build: false  # Not a C# project, build stuff at the test step instead.

test_script:
  # Install the test dependencies
  - pip install %NP_TEST_DEP% %SP_TEST_DEP% patsy pandas nose "pytest<4" pytest-xdist
  - pip install --pre --no-index --find-links .\%REPO_DIR%\dist %PKG_NAME%
  # Change into an innocuous directory and find tests from installation
  - mkdir for_testing
  - cd for_testing
  - python --version
  - 'echo backend : agg > matplotlibrc'
  - python --version
  - python -c "import statsmodels.api as sm; sm.show_versions();"
  - pytest --pyargs statsmodels
  - cd ..

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: $(REPO_DIR)\dist\*

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - pip install wheelhouse-uploader
  - python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=%REPO_DIR%\dist
    %UPLOAD_ARGS%
    %CONTAINER%

cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%APPDATA%\pip\Cache'
